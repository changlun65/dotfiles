" Gotta be first
set nocompatible

filetype off

" vim-plug Installation
" curl -fLo ~/.vim/autoload/plug.vim --create-dirs \
"     https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
"
" vim-plug Automatic installation
let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
  silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" Specify a directory for plugins
call plug#begin('~/.vim/plugged')

" ----- Making Vim look good ------------------------------------------
Plug 'altercation/vim-colors-solarized'
Plug 'tomasr/molokai'
Plug 'croaker/mustang-vim'
Plug 'itchyny/lightline.vim'

" ----- Vim as a programmer's text editor -----------------------------
Plug 'scrooloose/nerdtree'
Plug 'jistr/vim-nerdtree-tabs'
" Plug 'scrooloose/syntastic'
Plug 'kien/ctrlp.vim'
Plug 'vim-scripts/a.vim'

let g:ale_lint_on_enter = 0
Plug 'w0rp/ale'

" ----- Working with Git ----------------------------------------------
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-fugitive'

Plug 'christoomey/vim-tmux-navigator'

" --- C-tags integration --- "
Plug 'majutsushi/tagbar'

call plug#end()

filetype plugin indent on


" --- General settings ---
set backspace=indent,eol,start
set ruler               " show the cursor position all the time
set number              " display line number
set showcmd
set noshowmode
set clipboard=unnamed   " yank to the system register (*) by default
set showmatch           " Cursor shows matching ) and }
set wildchar=<TAB>      " start wild expansion in the command line using <TAB>
set wildmenu            " wild char completion menu

set autoindent          " auto indentation
set hlsearch            " highlight all matched terms
set incsearch           " incremental search
set nobackup            " no *~ backup files
"set copyindent         " copy the previous indentation on autoindenting
set ignorecase          " ignore case when searching
set smartcase           " ignore case if search pattern is all lowercase,case-sensitive otherwise

" set mouse=a
set mouse=nv            " enable mouse in seletec mode

":retab
set smarttab            " insert tabs on the start of a line according to context
set expandtab           " replace <TAB> with spaces, use CTRL+V <TAB> to input <TAB>
set softtabstop=4 tabstop=4 shiftwidth=4

syntax on

colorscheme mustang

" --- Files Specific ---
" This will jump to the last known cursor position
if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$") | exe "normal! g`\"" | endif
endif

" auto reload vimrc when editing it
autocmd! bufwritepost .vimrc source ~/.vimrc
"au FileType xml exe ":silent 1,$!xmllint --format --recover - 2>/dev/null"
au FileType Makefile set noexpandtab

" The second approach is to move the quickfix window to the bottom of the
" window layout using an auto-command.
autocmd FileType qf wincmd J
" This trigger takes advantage of the fact that the quickfix window can be
" easily distinguished by its file-type, qf. The wincmd J command is
" equivalent to the Ctrl+W, Shift+J shortcut telling Vim to move a window to
" the very bottom (see :help :wincmd and :help ^WJ).

" highlight all trailing whitespace
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/

" Automatically removing all trailing whitespace
function! TrimWhiteSpace()
    %s/\s\+$//e
endfunction
" autocmd FileType c,cpp,java autocmd BufWritePre <buffer> :call TrimWhiteSpace()


" --- Key Bindings ---
" Pressing return clears highlighted search
":nnoremap <CR> :nohlsearch<CR>/<BS>    " leads ENTER key invalid in quickfix Window
nmap <silent> <leader><CR> :nohlsearch<CR>
" When highlighting search terms, make sure text is contrasting color
":highlight Search ctermbg=yellow ctermfg=black
:highlight Search ctermbg=1 ctermfg=15

" map key to switch buffers
nnoremap <C-N> :bnext<CR>
nnoremap <C-B> :bprev<CR>

" --- Plugin Settings ---
"
" ----- lightline.vim  -----
" Always show statusbar
set laststatus=2

if !has('gui_running')
    set t_Co=256
endif

" set lightline to include git-branch
let g:lightline = {
      \ 'colorscheme': 'wombat',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'gitbranch', 'readonly', 'filename', 'modified' ] ,
      \             [ 'venv', 'readonly'] ]
      \ },
      \ 'component_function': {
      \   'gitbranch': 'fugitive#head',
      \    'venv': 'virtualenv#statusline'
      \ },
      \ }


" ----- jistr/vim-nerdtree-tabs -----
" Open/close NERDTree Tabs with \t
nmap <silent> <leader>t :NERDTreeTabsToggle<CR>
let NERDTreeDirArrows = 0
" To have NERDTree always open on startup
let g:nerdtree_tabs_open_on_console_startup = 0


" ----- scrooloose/syntastic settings -----
let g:syntastic_error_symbol = 'X'
:let g:syntastic_warning_symbol = 'O'
augroup mySyntastic
  au!
  au FileType tex let b:syntastic_mode = "passive"
augroup END


" ----- airblade/vim-gitgutter settings -----
" Required after having changed the colorscheme
hi clear SignColumn
" In vim-airline, only display "hunks" if the diff is non-zero
let g:airline#extensions#hunks#non_zero_only = 1

" search ctrlp with regex by default
let g:ctrlp_regexp_search = 1
let g:ctrlp_clear_cache_on_exit = 0


" Keep undo history across sessions by storing it in a file
if has('persistent_undo')
    let undo_dir = expand('$HOME/.vim/undo_dir')
    if !isdirectory(undo_dir)
        call mkdir(undo_dir, "", 0700)
    endif
    set undodir=$HOME/.vim/undo_dir
    set undofile
endif


" Macro for inserting a pdb breakpoint in python
au FileType python nmap <Leader>b Oimport pdb; pdb.set_trace() # BREAKPOINT<C-c>

" Macro for error handling in golang
 au FileType go nmap <Leader>e Oif err !=nil {<CR>    return err;<CR>}<C-c>

" spell checcking for markdown and text
au FileType markdown setlocal spell
au FileType text setlocal spell




